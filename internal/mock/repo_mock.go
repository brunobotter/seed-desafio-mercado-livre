// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/contract/repo.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	contract "github.com/brunobotter/mercado-livre/internal/domain/contract"
	entity "github.com/brunobotter/mercado-livre/internal/domain/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockRepoManager is a mock of RepoManager interface.
type MockRepoManager struct {
	ctrl     *gomock.Controller
	recorder *MockRepoManagerMockRecorder
}

// MockRepoManagerMockRecorder is the mock recorder for MockRepoManager.
type MockRepoManagerMockRecorder struct {
	mock *MockRepoManager
}

// NewMockRepoManager creates a new mock instance.
func NewMockRepoManager(ctrl *gomock.Controller) *MockRepoManager {
	mock := &MockRepoManager{ctrl: ctrl}
	mock.recorder = &MockRepoManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepoManager) EXPECT() *MockRepoManagerMockRecorder {
	return m.recorder
}

// UserRepo mocks base method.
func (m *MockRepoManager) UserRepo() contract.UserRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserRepo")
	ret0, _ := ret[0].(contract.UserRepository)
	return ret0
}

// UserRepo indicates an expected call of UserRepo.
func (mr *MockRepoManagerMockRecorder) UserRepo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserRepo", reflect.TypeOf((*MockRepoManager)(nil).UserRepo))
}

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// FindByUsername mocks base method.
func (m *MockUserRepository) FindByUsername(ctx context.Context, username string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUsername", ctx, username)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUsername indicates an expected call of FindByUsername.
func (mr *MockUserRepositoryMockRecorder) FindByUsername(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUsername", reflect.TypeOf((*MockUserRepository)(nil).FindByUsername), ctx, username)
}

// Save mocks base method.
func (m *MockUserRepository) Save(ctx context.Context, register entity.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, register)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockUserRepositoryMockRecorder) Save(ctx, register interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockUserRepository)(nil).Save), ctx, register)
}
