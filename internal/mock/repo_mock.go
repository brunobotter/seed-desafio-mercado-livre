// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/contract/repo.go
//
// Generated by this command:
//
//	mockgen -source=internal/domain/contract/service.go -destination=internal/mock/service_mock.go -package=mockmockgen -source=internal/domain/contract/repo.go -destination=internal/mock/repo_mock.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	contract "github.com/brunobotter/mercado-livre/internal/domain/contract"
	entity "github.com/brunobotter/mercado-livre/internal/domain/entity"
	response "github.com/brunobotter/mercado-livre/internal/response"
	gomock "go.uber.org/mock/gomock"
)

// MockRepoManager is a mock of RepoManager interface.
type MockRepoManager struct {
	ctrl     *gomock.Controller
	recorder *MockRepoManagerMockRecorder
	isgomock struct{}
}

// MockRepoManagerMockRecorder is the mock recorder for MockRepoManager.
type MockRepoManagerMockRecorder struct {
	mock *MockRepoManager
}

// NewMockRepoManager creates a new mock instance.
func NewMockRepoManager(ctrl *gomock.Controller) *MockRepoManager {
	mock := &MockRepoManager{ctrl: ctrl}
	mock.recorder = &MockRepoManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepoManager) EXPECT() *MockRepoManagerMockRecorder {
	return m.recorder
}

// CategoryRepo mocks base method.
func (m *MockRepoManager) CategoryRepo() contract.CategoryRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CategoryRepo")
	ret0, _ := ret[0].(contract.CategoryRepository)
	return ret0
}

// CategoryRepo indicates an expected call of CategoryRepo.
func (mr *MockRepoManagerMockRecorder) CategoryRepo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CategoryRepo", reflect.TypeOf((*MockRepoManager)(nil).CategoryRepo))
}

// UserRepo mocks base method.
func (m *MockRepoManager) UserRepo() contract.UserRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserRepo")
	ret0, _ := ret[0].(contract.UserRepository)
	return ret0
}

// UserRepo indicates an expected call of UserRepo.
func (mr *MockRepoManagerMockRecorder) UserRepo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserRepo", reflect.TypeOf((*MockRepoManager)(nil).UserRepo))
}

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
	isgomock struct{}
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// FindByUsername mocks base method.
func (m *MockUserRepository) FindByUsername(ctx context.Context, username string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUsername", ctx, username)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUsername indicates an expected call of FindByUsername.
func (mr *MockUserRepositoryMockRecorder) FindByUsername(ctx, username any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUsername", reflect.TypeOf((*MockUserRepository)(nil).FindByUsername), ctx, username)
}

// Save mocks base method.
func (m *MockUserRepository) Save(ctx context.Context, register entity.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, register)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockUserRepositoryMockRecorder) Save(ctx, register any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockUserRepository)(nil).Save), ctx, register)
}

// MockCategoryRepository is a mock of CategoryRepository interface.
type MockCategoryRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCategoryRepositoryMockRecorder
	isgomock struct{}
}

// MockCategoryRepositoryMockRecorder is the mock recorder for MockCategoryRepository.
type MockCategoryRepositoryMockRecorder struct {
	mock *MockCategoryRepository
}

// NewMockCategoryRepository creates a new mock instance.
func NewMockCategoryRepository(ctrl *gomock.Controller) *MockCategoryRepository {
	mock := &MockCategoryRepository{ctrl: ctrl}
	mock.recorder = &MockCategoryRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCategoryRepository) EXPECT() *MockCategoryRepositoryMockRecorder {
	return m.recorder
}

// FindByCategory mocks base method.
func (m *MockCategoryRepository) FindByCategory(ctx context.Context, category string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByCategory", ctx, category)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByCategory indicates an expected call of FindByCategory.
func (mr *MockCategoryRepositoryMockRecorder) FindByCategory(ctx, category any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByCategory", reflect.TypeOf((*MockCategoryRepository)(nil).FindByCategory), ctx, category)
}

// FindByCategoryParent mocks base method.
func (m *MockCategoryRepository) FindByCategoryParent(ctx context.Context, category string) (*int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByCategoryParent", ctx, category)
	ret0, _ := ret[0].(*int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByCategoryParent indicates an expected call of FindByCategoryParent.
func (mr *MockCategoryRepositoryMockRecorder) FindByCategoryParent(ctx, category any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByCategoryParent", reflect.TypeOf((*MockCategoryRepository)(nil).FindByCategoryParent), ctx, category)
}

// Save mocks base method.
func (m *MockCategoryRepository) Save(ctx context.Context, category entity.Category, id *int64) (response.SaveCategoryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, category, id)
	ret0, _ := ret[0].(response.SaveCategoryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save.
func (mr *MockCategoryRepositoryMockRecorder) Save(ctx, category, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockCategoryRepository)(nil).Save), ctx, category, id)
}
