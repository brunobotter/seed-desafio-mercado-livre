// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/contract/service.go
//
// Generated by this command:
//
//	mockgen -source=internal/domain/contract/service.go -destination=internal/mock/service_mock.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	mapping "github.com/brunobotter/mercado-livre/configs/mapping"
	contract "github.com/brunobotter/mercado-livre/internal/domain/contract"
	request "github.com/brunobotter/mercado-livre/internal/request"
	response "github.com/brunobotter/mercado-livre/internal/response"
	gomock "go.uber.org/mock/gomock"
)

// MockServiceManager is a mock of ServiceManager interface.
type MockServiceManager struct {
	ctrl     *gomock.Controller
	recorder *MockServiceManagerMockRecorder
	isgomock struct{}
}

// MockServiceManagerMockRecorder is the mock recorder for MockServiceManager.
type MockServiceManagerMockRecorder struct {
	mock *MockServiceManager
}

// NewMockServiceManager creates a new mock instance.
func NewMockServiceManager(ctrl *gomock.Controller) *MockServiceManager {
	mock := &MockServiceManager{ctrl: ctrl}
	mock.recorder = &MockServiceManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceManager) EXPECT() *MockServiceManagerMockRecorder {
	return m.recorder
}

// Config mocks base method.
func (m *MockServiceManager) Config() *mapping.Config {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Config")
	ret0, _ := ret[0].(*mapping.Config)
	return ret0
}

// Config indicates an expected call of Config.
func (mr *MockServiceManagerMockRecorder) Config() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Config", reflect.TypeOf((*MockServiceManager)(nil).Config))
}

// DB mocks base method.
func (m *MockServiceManager) DB() contract.DataManager {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DB")
	ret0, _ := ret[0].(contract.DataManager)
	return ret0
}

// DB indicates an expected call of DB.
func (mr *MockServiceManagerMockRecorder) DB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DB", reflect.TypeOf((*MockServiceManager)(nil).DB))
}

// InternalService mocks base method.
func (m *MockServiceManager) InternalService() contract.InternalService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InternalService")
	ret0, _ := ret[0].(contract.InternalService)
	return ret0
}

// InternalService indicates an expected call of InternalService.
func (mr *MockServiceManagerMockRecorder) InternalService() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InternalService", reflect.TypeOf((*MockServiceManager)(nil).InternalService))
}

// MockInternalService is a mock of InternalService interface.
type MockInternalService struct {
	ctrl     *gomock.Controller
	recorder *MockInternalServiceMockRecorder
	isgomock struct{}
}

// MockInternalServiceMockRecorder is the mock recorder for MockInternalService.
type MockInternalServiceMockRecorder struct {
	mock *MockInternalService
}

// NewMockInternalService creates a new mock instance.
func NewMockInternalService(ctrl *gomock.Controller) *MockInternalService {
	mock := &MockInternalService{ctrl: ctrl}
	mock.recorder = &MockInternalServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInternalService) EXPECT() *MockInternalServiceMockRecorder {
	return m.recorder
}

// CategoryService mocks base method.
func (m *MockInternalService) CategoryService() contract.CategoryService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CategoryService")
	ret0, _ := ret[0].(contract.CategoryService)
	return ret0
}

// CategoryService indicates an expected call of CategoryService.
func (mr *MockInternalServiceMockRecorder) CategoryService() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CategoryService", reflect.TypeOf((*MockInternalService)(nil).CategoryService))
}

// UserService mocks base method.
func (m *MockInternalService) UserService() contract.UserService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserService")
	ret0, _ := ret[0].(contract.UserService)
	return ret0
}

// UserService indicates an expected call of UserService.
func (mr *MockInternalServiceMockRecorder) UserService() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserService", reflect.TypeOf((*MockInternalService)(nil).UserService))
}

// MockUserService is a mock of UserService interface.
type MockUserService struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceMockRecorder
	isgomock struct{}
}

// MockUserServiceMockRecorder is the mock recorder for MockUserService.
type MockUserServiceMockRecorder struct {
	mock *MockUserService
}

// NewMockUserService creates a new mock instance.
func NewMockUserService(ctrl *gomock.Controller) *MockUserService {
	mock := &MockUserService{ctrl: ctrl}
	mock.recorder = &MockUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserService) EXPECT() *MockUserServiceMockRecorder {
	return m.recorder
}

// Register mocks base method.
func (m *MockUserService) Register(ctx context.Context, register request.RegisterNewUserRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, register)
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register.
func (mr *MockUserServiceMockRecorder) Register(ctx, register any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockUserService)(nil).Register), ctx, register)
}

// MockCategoryService is a mock of CategoryService interface.
type MockCategoryService struct {
	ctrl     *gomock.Controller
	recorder *MockCategoryServiceMockRecorder
	isgomock struct{}
}

// MockCategoryServiceMockRecorder is the mock recorder for MockCategoryService.
type MockCategoryServiceMockRecorder struct {
	mock *MockCategoryService
}

// NewMockCategoryService creates a new mock instance.
func NewMockCategoryService(ctrl *gomock.Controller) *MockCategoryService {
	mock := &MockCategoryService{ctrl: ctrl}
	mock.recorder = &MockCategoryServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCategoryService) EXPECT() *MockCategoryServiceMockRecorder {
	return m.recorder
}

// SaveCategory mocks base method.
func (m *MockCategoryService) SaveCategory(ctx context.Context, category request.SaveCategoryRequest) (response.SaveCategoryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveCategory", ctx, category)
	ret0, _ := ret[0].(response.SaveCategoryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveCategory indicates an expected call of SaveCategory.
func (mr *MockCategoryServiceMockRecorder) SaveCategory(ctx, category any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveCategory", reflect.TypeOf((*MockCategoryService)(nil).SaveCategory), ctx, category)
}
